<?php

namespace App\Http\Controllers;

use App\Club;
use App\Events\MemberCommentedClubPost;
use App\Events\MemberLikedClubPost;
use App\Events\PostCreated;
use App\Http\Resources\PostCommentResource;
use App\Http\Resources\PostLikeResource;
use App\Http\Resources\PostResource;
use App\Post;
use App\PostComment;
use App\PostLike;
use App\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class PostController extends Controller
{
    public function index(User $user, Club $club, Request $request)
    {
        if (!$user) {
            return response()->json(['message' => __('User not found')], 404);
        }

        if (!$club) {
            return response()->json(['message' => __('Club not found')], 404);
        }

        $userPosts = Post::whereClubId($club->id)->paginate($this->per_page);

        return PostResource::collection($userPosts);
    }

    public function store(User $user, Club $club, Request $request)
    {
        if (!$user->id) {
            return response()->json(['message' => __('User not found')], 404);
        }

        if (!$club->id) {
            return response()->json(['message' => __('Club not found')], 404);
        }

        if ($club->isDeletedDueToNoMembers()) {
            return response()->json(['message' => __('Club was deleted due to fewer members')], 403);
        }

        $validator = Validator::make($request->all(), [
            'type' => 'required|string',
            'content' => 'required',
            'posted_by' => 'required|exists:users,id',
            'post_object' => 'boolean',
            'visibility' => 'boolean|required',
        ]);

        $request->merge(['post_object' => true]);

        if ($validator->validate()) {
            $post = Post::create([
                'type' => $request->type,
                'content' => $request->get('content'),
                'posted_by' => $request->posted_by,
                'user_id' => $request->user('api')->id,
                'club_id' => $club->id,
                'post_object' => $request->post_object,
                'visibility' => $request->input('visibility', true),
            ]);
        }
        if ($post) {
            event(new PostCreated($post));

            return new PostResource($post);
        }

        return response()->json(['message' => __('Error while creating post')], 400);
    }

    public function show(User $user, Club $club, Post $post)
    {
        if ($post->id) {
            return new PostResource($post);
        }
    }

    public function update(Request $request, $id)
    {
    }

    public function destroy($id)
    {
    }

    public function comment(Club $club, Post $post, Request $request)
    {
        $user = $request->user();

        if (!$club->id) {
            // comment
            return response()
                ->json([
                    'message' => __('Club not found')
                ], 404);
        }

        if (!$post->id) {
            return response()->json(['message' => __('Post not found')], 404);
        }

        if (!$user->can('comment', $post)) {
            return response()->json(['message' => __('Only board members and members can comment')], 403);
        }

        // Todo : Add option to comment on comment
        $comment = $post->comments()->create(['user_id' => $user->id, 'comment' => $request->comment]);

        event(new MemberCommentedClubPost($comment));

        return new PostCommentResource(PostComment::with('user')->find($comment->id));
    }

    public function like(Club $club, Post $post, Request $request)
    {
        if (!$club->id) {
            return response()->json(['message' => __('Club not found')], 404);
        }

        if (!$post->id) {
            return response()->json(['message' => __('Post not found')], 404);
        }

        $user = $request->user();

        if (!$user->can('like', $post)) {
            return response()->json(['message' => __('Only board members and members can like')], 403);
        }

        if (!$post->likedByUser($user)) {
            $like = $post->addLike($user);
            event(new MemberLikedClubPost($like));

            return new PostResource($post);
        }

        $post->removeLike($user);

        return new PostResource($post);
    }

    public function getUsersWhoLikedThePost(Club $club, Post $post, Request $request)
    {
        return PostLikeResource::collection($post->likes);
    }

    public function getCommentsOfThePost(Club $club, Post $post, Request $request)
    {
        return PostCommentResource::collection($post->comments);
    }
}
